# Manual de Usuario - Proyecto 1
## Objetivos
### General 
- Explicar el flujo de funcionamiento del programa.
### Específicos
- Facilitar una comprensión clara de la interacción entre las funciones del programa.
- Detallar de manera precisa el funcionamiento de la solución implementada.

## Introducción
El presente manual tiene como objetivo proporcionar los conocimientos necesarios para utilizar el programa de manera efectiva. En este se describe detalladamente las funcionalidades del software, con especial énfasis en su flujo de trabajo.

El programa es un compilador que simula el dilema del prisionero, un concepto desarrollado por Robert Axelrod. El software permite al usuario ingresar datos mediante un archivo o directamente en un área de texto designada. La entrada se divide en tres secciones principales:
- Definición de Estrategias: Donde se especifican las estrategias que los "prisioneros" seguirán durante la simulación.
- Definición de Partidas: Donde se configuran las condiciones y reglas de las partidas a simular.
- Punto de Entrada: Donde se inicia la ejecución de la simulación.

Una vez ejecutado, el programa genera una salida en un área designada, mostrando el desarrollo de la partida y el comportamiento de las estrategias. Además, se genera un reporte de tokens y, en caso de errores, un reporte de errores con información detallada para facilitar la corrección en el código fuente.

## Requisito del Sistema
- Poseer el ejecutable (.jar)
- Sistema operativo compatible con JDK
- Tener instalado JDK
- Procesador de 1GHz o superior 
- Memoria RAM de 2GB
- Teclado
- Pantalla
- Mouse (opcional) 

## Flujo de funcionalidades del programa

1. El programa se inicia con el archivo .jar
   ![1](./img/1.png)
2. Al dar doble click al archivo .jar se abre la siguiente interfaz en donde se encuentra la salida, la entrada, los reportes y lo botones que permiten interactuar con todo en el programa.
   ![2](./img/2.png)
3. En el área de entrada se puede escrbir lo que se desee que se anailice respetando la gramática del programa.
   ![3](./img/3.png)
4. Al presionar el botón "Nuevo Archivo", se borrará todo lo que se encuentre en todas la ventanas para iniciar un nuevo archivo.
   ![4](./img/4.png)
5. Al dar click en "Abrir Archivo", se abrirá el explorador de archivos que permitirá escoger un archivo para que se abra en el programa.
   ![5](./img/5.png)
6. Una vez se escoge el archivo con extensión .cmp, se visualiza de la siguiente forma en la sección de entrada del programa.
   ![6](./img/6.png)
7. Ahora si se desea guardar el archivo, se presiona el botón "Guardar Archivo" el cual abrirá el explorador de archivos para escoger donde se guardará este.
   ![7](./img/7.png)
8. Regresando a lo que se tenía con el archivo nuevo, si se presiona la opción de "Reporte de Errores", se lograrán visualizar todos los errores de tipo léxico que hay en el archivo de entrada. En este caso no hay errores.
   ![8](./img/8.png)
9.  Ahora si se colocan errores y se presiona la opción de "Reporte de Errores", se mostrarán los errores y su ubicación.
    ![9](./img/9.png) 
10. Y si se presiona la opción de "Reporte de tokens", se mostrarán todos los tokens que hay en el archivo de entrada. En este caso no se muestran porque hay errores léxico.
    ![10](./img/10.png) 
11. Si se eliminan los errores, se mostrarán de la siguiente manera
    ![11](./img/11.png)
12. Por último, si se da a ejecutar, se realizará un análisis sintáctico para corroborar que todo esté correctamente estructurado.
    ![12](./img/12.png)
13. Una vez que se revisa que esté correctamente estructurado, se muestra la salida correspondiente.
    ![13](./img/13.png)
Y con esto se muestra todo lo conciernente al programa :)