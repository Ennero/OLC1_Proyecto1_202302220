
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package olc1_proyecto1_202302220.analizador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\003\007\000\002\006\004\000\002\007\005\000" +
    "\002\010\007\000\002\011\010\000\002\011\006\000\002" +
    "\011\004\000\002\004\007\000\002\012\005\000\002\026" +
    "\012\000\002\027\005\000\002\030\007\000\002\031\011" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\005\006\000\002\014\014\000\002" +
    "\015\005\000\002\015\003\000\002\021\003\000\002\021" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\004\000\002" +
    "\022\010\000\002\022\006\000\002\022\010\000\002\022" +
    "\010\000\002\023\005\000\002\024\005\000\002\024\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\010\005\011\006\005\007\006\001\002\000" +
    "\004\002\232\001\002\000\004\066\160\001\002\000\004" +
    "\056\140\001\002\000\012\002\ufffe\005\ufffe\006\ufffe\007" +
    "\ufffe\001\002\000\012\002\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\001\002\000\004\066\015\001\002\000\012\002\uffff\005" +
    "\011\006\005\007\006\001\002\000\012\002\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\001\002\000\004\002\000\001\002\000" +
    "\004\056\016\001\002\000\004\012\020\001\002\000\004" +
    "\057\137\001\002\000\004\063\135\001\002\000\004\013" +
    "\023\001\002\000\004\057\ufffa\001\002\000\004\063\024" +
    "\001\002\000\004\054\025\001\002\000\006\014\030\016" +
    "\027\001\002\000\004\055\134\001\002\000\042\010\046" +
    "\011\045\017\036\020\043\021\031\022\041\023\054\027" +
    "\055\030\034\031\040\032\050\045\035\054\047\064\053" +
    "\065\042\067\044\001\002\000\042\010\046\011\045\017" +
    "\036\020\043\021\031\022\041\023\054\027\055\030\034" +
    "\031\040\032\050\045\035\054\047\064\053\065\042\067" +
    "\044\001\002\000\004\060\126\001\002\000\036\015\uffe2" +
    "\037\uffe2\043\uffe2\044\uffe2\046\uffe2\047\uffe2\050\uffe2\051" +
    "\uffe2\052\uffe2\053\uffe2\055\uffe2\057\uffe2\061\uffe2\062\uffe2" +
    "\001\002\000\024\015\122\043\064\044\072\046\065\047" +
    "\066\050\067\051\071\052\070\053\073\001\002\000\036" +
    "\015\uffdd\037\uffdd\043\uffdd\044\uffdd\046\uffdd\047\uffdd\050" +
    "\uffdd\051\uffdd\052\uffdd\053\uffdd\055\uffdd\057\uffdd\061\uffdd" +
    "\062\uffdd\001\002\000\042\010\046\011\045\017\036\020" +
    "\043\021\031\022\041\023\054\027\055\030\034\031\040" +
    "\032\050\045\035\054\047\064\053\065\042\067\044\001" +
    "\002\000\004\060\114\001\002\000\036\015\uffe0\037\uffe0" +
    "\043\uffe0\044\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052" +
    "\uffe0\053\uffe0\055\uffe0\057\uffe0\061\uffe0\062\uffe0\001\002" +
    "\000\036\015\uffdb\037\uffdb\043\uffdb\044\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\055\uffdb\057\uffdb" +
    "\061\uffdb\062\uffdb\001\002\000\004\060\107\001\002\000" +
    "\036\015\uffd8\037\uffd8\043\uffd8\044\uffd8\046\uffd8\047\uffd8" +
    "\050\uffd8\051\uffd8\052\uffd8\053\uffd8\055\uffd8\057\uffd8\061" +
    "\uffd8\062\uffd8\001\002\000\004\060\104\001\002\000\036" +
    "\015\uffdf\037\uffdf\043\uffdf\044\uffdf\046\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\052\uffdf\053\uffdf\055\uffdf\057\uffdf\061\uffdf" +
    "\062\uffdf\001\002\000\040\013\uffe5\015\uffe5\037\uffe5\043" +
    "\uffe5\044\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5" +
    "\053\uffe5\055\uffe5\057\uffe5\061\uffe5\062\uffe5\001\002\000" +
    "\040\013\uffe6\015\uffe6\037\uffe6\043\uffe6\044\uffe6\046\uffe6" +
    "\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\055\uffe6\057" +
    "\uffe6\061\uffe6\062\uffe6\001\002\000\042\010\046\011\045" +
    "\017\036\020\043\021\031\022\041\023\054\027\055\030" +
    "\034\031\040\032\050\045\035\054\047\064\053\065\042" +
    "\067\044\001\002\000\036\015\uffda\037\uffda\043\uffda\044" +
    "\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda" +
    "\055\uffda\057\uffda\061\uffda\062\uffda\001\002\000\036\015" +
    "\uffe4\037\uffe4\043\uffe4\044\uffe4\046\uffe4\047\uffe4\050\uffe4" +
    "\051\uffe4\052\uffe4\053\uffe4\055\uffe4\057\uffe4\061\uffe4\062" +
    "\uffe4\001\002\000\036\015\uffe3\037\uffe3\043\uffe3\044\uffe3" +
    "\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\055" +
    "\uffe3\057\uffe3\061\uffe3\062\uffe3\001\002\000\036\015\uffd9" +
    "\037\uffd9\043\uffd9\044\uffd9\046\uffd9\047\uffd9\050\uffd9\051" +
    "\uffd9\052\uffd9\053\uffd9\055\uffd9\057\uffd9\061\uffd9\062\uffd9" +
    "\001\002\000\036\015\uffdc\037\uffdc\043\uffdc\044\uffdc\046" +
    "\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\055\uffdc" +
    "\057\uffdc\061\uffdc\062\uffdc\001\002\000\036\015\uffde\037" +
    "\uffde\043\uffde\044\uffde\046\uffde\047\uffde\050\uffde\051\uffde" +
    "\052\uffde\053\uffde\055\uffde\057\uffde\061\uffde\062\uffde\001" +
    "\002\000\036\015\uffe1\037\uffe1\043\uffe1\044\uffe1\046\uffe1" +
    "\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\055\uffe1\057" +
    "\uffe1\061\uffe1\062\uffe1\001\002\000\026\043\064\044\072" +
    "\046\065\047\066\050\067\051\071\052\070\053\073\055" +
    "\uffc8\062\uffc8\001\002\000\006\055\062\062\061\001\002" +
    "\000\042\010\046\011\045\017\036\020\043\021\031\022" +
    "\041\023\054\027\055\030\034\031\040\032\050\045\035" +
    "\054\047\064\053\065\042\067\044\001\002\000\036\015" +
    "\uffca\037\uffca\043\uffca\044\uffca\046\uffca\047\uffca\050\uffca" +
    "\051\uffca\052\uffca\053\uffca\055\uffca\057\uffca\061\uffca\062" +
    "\uffca\001\002\000\026\043\064\044\072\046\065\047\066" +
    "\050\067\051\071\052\070\053\073\055\uffc9\062\uffc9\001" +
    "\002\000\042\010\046\011\045\017\036\020\043\021\031" +
    "\022\041\023\054\027\055\030\034\031\040\032\050\045" +
    "\035\054\047\064\053\065\042\067\044\001\002\000\042" +
    "\010\046\011\045\017\036\020\043\021\031\022\041\023" +
    "\054\027\055\030\034\031\040\032\050\045\035\054\047" +
    "\064\053\065\042\067\044\001\002\000\042\010\046\011" +
    "\045\017\036\020\043\021\031\022\041\023\054\027\055" +
    "\030\034\031\040\032\050\045\035\054\047\064\053\065" +
    "\042\067\044\001\002\000\042\010\046\011\045\017\036" +
    "\020\043\021\031\022\041\023\054\027\055\030\034\031" +
    "\040\032\050\045\035\054\047\064\053\065\042\067\044" +
    "\001\002\000\042\010\046\011\045\017\036\020\043\021" +
    "\031\022\041\023\054\027\055\030\034\031\040\032\050" +
    "\045\035\054\047\064\053\065\042\067\044\001\002\000" +
    "\042\010\046\011\045\017\036\020\043\021\031\022\041" +
    "\023\054\027\055\030\034\031\040\032\050\045\035\054" +
    "\047\064\053\065\042\067\044\001\002\000\042\010\046" +
    "\011\045\017\036\020\043\021\031\022\041\023\054\027" +
    "\055\030\034\031\040\032\050\045\035\054\047\064\053" +
    "\065\042\067\044\001\002\000\042\010\046\011\045\017" +
    "\036\020\043\021\031\022\041\023\054\027\055\030\034" +
    "\031\040\032\050\045\035\054\047\064\053\065\042\067" +
    "\044\001\002\000\036\015\uffd2\037\uffd2\043\uffd2\044\uffd2" +
    "\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\055" +
    "\uffd2\057\uffd2\061\uffd2\062\uffd2\001\002\000\036\015\uffd0" +
    "\037\uffd0\043\uffd0\044\uffd0\046\uffd0\047\uffd0\050\uffd0\051" +
    "\uffd0\052\uffd0\053\uffd0\055\uffd0\057\uffd0\061\uffd0\062\uffd0" +
    "\001\002\000\036\015\uffd4\037\uffd4\043\uffd4\044\uffd4\046" +
    "\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\055\uffd4" +
    "\057\uffd4\061\uffd4\062\uffd4\001\002\000\036\015\uffd3\037" +
    "\uffd3\043\uffd3\044\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\055\uffd3\057\uffd3\061\uffd3\062\uffd3\001" +
    "\002\000\036\015\uffd5\037\uffd5\043\uffd5\044\uffd5\046\uffd5" +
    "\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\055\uffd5\057" +
    "\uffd5\061\uffd5\062\uffd5\001\002\000\036\015\uffd6\037\uffd6" +
    "\043\uffd6\044\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052" +
    "\uffd6\053\uffd6\055\uffd6\057\uffd6\061\uffd6\062\uffd6\001\002" +
    "\000\036\015\uffd7\037\uffd7\043\uffd7\044\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\055\uffd7\057\uffd7" +
    "\061\uffd7\062\uffd7\001\002\000\036\015\uffd1\037\uffd1\043" +
    "\uffd1\044\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1" +
    "\053\uffd1\055\uffd1\057\uffd1\061\uffd1\062\uffd1\001\002\000" +
    "\042\010\046\011\045\017\036\020\043\021\031\022\041" +
    "\023\054\027\055\030\034\031\040\032\050\045\035\054" +
    "\047\064\053\065\042\067\044\001\002\000\024\043\064" +
    "\044\072\046\065\047\066\050\067\051\071\052\070\053" +
    "\073\061\106\001\002\000\036\015\uffcd\037\uffcd\043\uffcd" +
    "\044\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053" +
    "\uffcd\055\uffcd\057\uffcd\061\uffcd\062\uffcd\001\002\000\042" +
    "\010\046\011\045\017\036\020\043\021\031\022\041\023" +
    "\054\027\055\030\034\031\040\032\050\045\035\054\047" +
    "\064\053\065\042\067\044\001\002\000\024\043\064\044" +
    "\072\046\065\047\066\050\067\051\071\052\070\053\073" +
    "\062\111\001\002\000\042\010\046\011\045\017\036\020" +
    "\043\021\031\022\041\023\054\027\055\030\034\031\040" +
    "\032\050\045\035\054\047\064\053\065\042\067\044\001" +
    "\002\000\024\043\064\044\072\046\065\047\066\050\067" +
    "\051\071\052\070\053\073\061\113\001\002\000\036\015" +
    "\uffcc\037\uffcc\043\uffcc\044\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\053\uffcc\055\uffcc\057\uffcc\061\uffcc\062" +
    "\uffcc\001\002\000\042\010\046\011\045\017\036\020\043" +
    "\021\031\022\041\023\054\027\055\030\034\031\040\032" +
    "\050\045\035\054\047\064\053\065\042\067\044\001\002" +
    "\000\024\043\064\044\072\046\065\047\066\050\067\051" +
    "\071\052\070\053\073\062\116\001\002\000\042\010\046" +
    "\011\045\017\036\020\043\021\031\022\041\023\054\027" +
    "\055\030\034\031\040\032\050\045\035\054\047\064\053" +
    "\065\042\067\044\001\002\000\024\043\064\044\072\046" +
    "\065\047\066\050\067\051\071\052\070\053\073\061\120" +
    "\001\002\000\036\015\uffce\037\uffce\043\uffce\044\uffce\046" +
    "\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\055\uffce" +
    "\057\uffce\061\uffce\062\uffce\001\002\000\036\015\uffcf\037" +
    "\uffcf\043\uffcf\044\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf" +
    "\052\uffcf\053\uffcf\055\uffcf\057\uffcf\061\uffcf\062\uffcf\001" +
    "\002\000\042\010\046\011\045\017\036\020\043\021\031" +
    "\022\041\023\054\027\055\030\034\031\040\032\050\045" +
    "\035\054\047\064\053\065\042\067\044\001\002\000\026" +
    "\043\064\044\072\046\065\047\066\050\067\051\071\052" +
    "\070\053\073\055\ufff6\062\124\001\002\000\006\014\030" +
    "\016\027\001\002\000\004\055\ufff7\001\002\000\042\010" +
    "\046\011\045\017\036\020\043\021\031\022\041\023\054" +
    "\027\055\030\034\031\040\032\050\045\035\054\047\064" +
    "\053\065\042\067\044\001\002\000\024\043\064\044\072" +
    "\046\065\047\066\050\067\051\071\052\070\053\073\062" +
    "\130\001\002\000\042\010\046\011\045\017\036\020\043" +
    "\021\031\022\041\023\054\027\055\030\034\031\040\032" +
    "\050\045\035\054\047\064\053\065\042\067\044\001\002" +
    "\000\024\043\064\044\072\046\065\047\066\050\067\051" +
    "\071\052\070\053\073\061\132\001\002\000\036\015\uffcb" +
    "\037\uffcb\043\uffcb\044\uffcb\046\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\052\uffcb\053\uffcb\055\uffcb\057\uffcb\061\uffcb\062\uffcb" +
    "\001\002\000\024\043\064\044\072\046\065\047\066\050" +
    "\067\051\071\052\070\053\073\055\ufff5\001\002\000\004" +
    "\057\ufff8\001\002\000\006\010\046\011\045\001\002\000" +
    "\004\013\ufff9\001\002\000\012\002\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\001\002\000\004\040\142\001\002\000\004\057" +
    "\157\001\002\000\004\054\143\001\002\000\004\066\144" +
    "\001\002\000\006\055\uffe7\062\uffe7\001\002\000\006\055" +
    "\147\062\146\001\002\000\004\066\156\001\002\000\004" +
    "\041\150\001\002\000\004\056\151\001\002\000\004\042" +
    "\152\001\002\000\004\063\153\001\002\000\042\010\046" +
    "\011\045\017\036\020\043\021\031\022\041\023\054\027" +
    "\055\030\034\031\040\032\050\045\035\054\047\064\053" +
    "\065\042\067\044\001\002\000\024\043\064\044\072\046" +
    "\065\047\066\050\067\051\071\052\070\053\073\057\155" +
    "\001\002\000\004\057\uffe9\001\002\000\006\055\uffe8\062" +
    "\uffe8\001\002\000\012\002\uffea\005\uffea\006\uffea\007\uffea" +
    "\001\002\000\004\056\161\001\002\000\004\024\162\001" +
    "\002\000\004\025\223\001\002\000\004\057\222\001\002" +
    "\000\004\026\165\001\002\000\004\063\220\001\002\000" +
    "\004\037\167\001\002\000\004\063\171\001\002\000\004" +
    "\057\ufff3\001\002\000\004\056\172\001\002\000\012\033" +
    "\176\034\173\035\174\036\200\001\002\000\004\063\216" +
    "\001\002\000\004\063\214\001\002\000\004\057\213\001" +
    "\002\000\004\063\211\001\002\000\004\062\203\001\002" +
    "\000\004\063\201\001\002\000\042\010\046\011\045\017" +
    "\036\020\043\021\031\022\041\023\054\027\055\030\034" +
    "\031\040\032\050\045\035\054\047\064\053\065\042\067" +
    "\044\001\002\000\026\043\064\044\072\046\065\047\066" +
    "\050\067\051\071\052\070\053\073\057\uffeb\062\uffeb\001" +
    "\002\000\012\033\176\034\173\035\174\036\200\001\002" +
    "\000\004\062\205\001\002\000\012\033\176\034\173\035" +
    "\174\036\200\001\002\000\004\062\207\001\002\000\012" +
    "\033\176\034\173\035\174\036\200\001\002\000\004\057" +
    "\uffef\001\002\000\042\010\046\011\045\017\036\020\043" +
    "\021\031\022\041\023\054\027\055\030\034\031\040\032" +
    "\050\045\035\054\047\064\053\065\042\067\044\001\002" +
    "\000\026\043\064\044\072\046\065\047\066\050\067\051" +
    "\071\052\070\053\073\057\uffee\062\uffee\001\002\000\004" +
    "\057\ufff0\001\002\000\042\010\046\011\045\017\036\020" +
    "\043\021\031\022\041\023\054\027\055\030\034\031\040" +
    "\032\050\045\035\054\047\064\053\065\042\067\044\001" +
    "\002\000\026\043\064\044\072\046\065\047\066\050\067" +
    "\051\071\052\070\053\073\057\uffec\062\uffec\001\002\000" +
    "\042\010\046\011\045\017\036\020\043\021\031\022\041" +
    "\023\054\027\055\030\034\031\040\032\050\045\035\054" +
    "\047\064\053\065\042\067\044\001\002\000\026\043\064" +
    "\044\072\046\065\047\066\050\067\051\071\052\070\053" +
    "\073\057\uffed\062\uffed\001\002\000\042\010\046\011\045" +
    "\017\036\020\043\021\031\022\041\023\054\027\055\030" +
    "\034\031\040\032\050\045\035\054\047\064\053\065\042" +
    "\067\044\001\002\000\024\037\ufff1\043\064\044\072\046" +
    "\065\047\066\050\067\051\071\052\070\053\073\001\002" +
    "\000\012\002\ufff4\005\ufff4\006\ufff4\007\ufff4\001\002\000" +
    "\004\063\224\001\002\000\004\054\225\001\002\000\004" +
    "\066\226\001\002\000\004\062\227\001\002\000\004\066" +
    "\230\001\002\000\004\055\231\001\002\000\004\026\ufff2" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\014\002\003\003\006\004\012\005\007\016" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\002\013\003\006\004\012\005\007\016\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\016\007\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\025" +
    "\001\001\000\002\001\001\000\016\017\050\020\051\021" +
    "\031\022\055\023\036\025\132\001\001\000\016\017\050" +
    "\020\051\021\031\022\055\023\036\025\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\050\020\051\021\031\022\055\023" +
    "\036\025\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\017\050\020\051\021\031\022\055\023" +
    "\036\024\057\025\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\050\020\051\021\031\022" +
    "\055\023\036\025\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\050\020\051\021\031\022\055\023" +
    "\036\025\102\001\001\000\016\017\050\020\051\021\031" +
    "\022\055\023\036\025\101\001\001\000\016\017\050\020" +
    "\051\021\031\022\055\023\036\025\100\001\001\000\016" +
    "\017\050\020\051\021\031\022\055\023\036\025\077\001" +
    "\001\000\016\017\050\020\051\021\031\022\055\023\036" +
    "\025\076\001\001\000\016\017\050\020\051\021\031\022" +
    "\055\023\036\025\075\001\001\000\016\017\050\020\051" +
    "\021\031\022\055\023\036\025\074\001\001\000\016\017" +
    "\050\020\051\021\031\022\055\023\036\025\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\050\020\051\021" +
    "\031\022\055\023\036\025\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\050\020\051\021\031\022" +
    "\055\023\036\025\107\001\001\000\002\001\001\000\016" +
    "\017\050\020\051\021\031\022\055\023\036\025\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\017\050" +
    "\020\051\021\031\022\055\023\036\025\114\001\001\000" +
    "\002\001\001\000\016\017\050\020\051\021\031\022\055" +
    "\023\036\025\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\017\050\020\051\021\031" +
    "\022\055\023\036\025\122\001\001\000\002\001\001\000" +
    "\004\011\124\001\001\000\002\001\001\000\016\017\050" +
    "\020\051\021\031\022\055\023\036\025\126\001\001\000" +
    "\002\001\001\000\016\017\050\020\051\021\031\022\055" +
    "\023\036\025\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\050\020\051\021" +
    "\031\022\055\023\036\025\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\162\026\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\165\001\001\000" +
    "\002\001\001\000\004\030\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\176\031" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\050\020\051\021\031\022\055\023\036" +
    "\025\201\001\001\000\002\001\001\000\004\013\203\001" +
    "\001\000\002\001\001\000\004\013\205\001\001\000\002" +
    "\001\001\000\004\013\207\001\001\000\002\001\001\000" +
    "\016\017\050\020\051\021\031\022\055\023\036\025\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\017" +
    "\050\020\051\021\031\022\055\023\036\025\214\001\001" +
    "\000\002\001\001\000\016\017\050\020\051\021\031\022" +
    "\055\023\036\025\216\001\001\000\002\001\001\000\016" +
    "\017\050\020\051\021\031\022\055\023\036\025\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= instruccion ini 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= bloque_Strategy 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= bloque_Match 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= bloque_Main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bloque_Strategy ::= STRATEGY ID ABRE_LLAVE strategy_Cuerpo CIERRA_LLAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_Strategy",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // strategy_Cuerpo ::= regla_Inicial reglas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strategy_Cuerpo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // regla_Inicial ::= INITIAL DOS_PUNTOS desicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("regla_Inicial",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // reglas ::= RULES DOS_PUNTOS ABRE_CORCHETE lista_Reglas CIERRA_CORCHETE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reglas",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_Reglas ::= IF expresion THEN expresion COMA lista_Reglas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_Reglas",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_Reglas ::= IF expresion THEN expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_Reglas",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_Reglas ::= ELSE expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_Reglas",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bloque_Match ::= MATCH ID ABRE_LLAVE match_Cuerpo CIERRA_LLAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_Match",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // match_Cuerpo ::= jugadores rondas puntuaciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("match_Cuerpo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // jugadores ::= PLAYERS STRATEGIES DOS_PUNTOS ABRE_CORCHETE ID COMA ID CIERRA_CORCHETE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jugadores",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // rondas ::= ROUNDS DOS_PUNTOS expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rondas",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // puntuaciones ::= SCORING DOS_PUNTOS ABRE_LLAVE puntos CIERRA_LLAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("puntuaciones",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // puntos ::= puntuacion COMA puntuacion COMA puntuacion COMA puntuacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("puntos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // puntuacion ::= MUTUAL_COOPERATION DOS_PUNTOS expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("puntuacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // puntuacion ::= MUTUAL_DEFECTION DOS_PUNTOS expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("puntuacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // puntuacion ::= BETRAYAL_REWARD DOS_PUNTOS expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("puntuacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // puntuacion ::= BETRAYAL_PUNISHMENT DOS_PUNTOS expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("puntuacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloque_Main ::= MAIN ABRE_LLAVE main_Cuerpo CIERRA_LLAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_Main",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // main_Cuerpo ::= RUN ABRE_CORCHETE match_Lista CIERRA_CORCHETE WITH ABRE_LLAVE SEED DOS_PUNTOS expresion CIERRA_LLAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_Cuerpo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // match_Lista ::= match_Lista COMA ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("match_Lista",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // match_Lista ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("match_Lista",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // desicion ::= C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("desicion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // desicion ::= D 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("desicion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= comparacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= logica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= desicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= lista 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= RANDOM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= OPPONENT_HISTORY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= SELF_HISTORY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= ROUND_NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= FLOTANTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comparacion ::= expresion IGUAL expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparacion ::= expresion NO_IGUAL expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comparacion ::= expresion MENOR expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comparacion ::= expresion MAYOR expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comparacion ::= expresion MENOR_IGUAL expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comparacion ::= expresion MAYOR_IGUAL expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // logica ::= expresion AND expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logica",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // logica ::= expresion OR expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logica",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // logica ::= NOT expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logica",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // funcion ::= GET_MOVE ABRE_PARENTESIS expresion COMA expresion CIERRA_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // funcion ::= LAST_MOVE ABRE_PARENTESIS expresion CIERRA_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // funcion ::= GET_MOVES_COUNT ABRE_PARENTESIS expresion COMA expresion CIERRA_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // funcion ::= GET_LAST_N_MOVES ABRE_PARENTESIS expresion COMA expresion CIERRA_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lista ::= ABRE_CORCHETE elemento CIERRA_CORCHETE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // elemento ::= elemento COMA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // elemento ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
