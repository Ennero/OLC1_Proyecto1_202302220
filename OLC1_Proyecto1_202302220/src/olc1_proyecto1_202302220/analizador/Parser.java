
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package olc1_proyecto1_202302220.analizador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import olc1_proyecto1_202302220.*;
import utilidades.*;
import expresion.*;
import abstractas.*;
import instruccion.*;
import objetos.*;
import java.util.ArrayList;
import java.util.Arrays;
import random.DeterministicRandomGenerator;
import random.RandomGenerator;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\007\000\002\006\004\000" +
    "\002\007\005\000\002\010\007\000\002\011\010\000\002" +
    "\011\006\000\002\011\004\000\002\012\007\000\002\013" +
    "\005\000\002\014\012\000\002\015\005\000\002\016\007" +
    "\000\002\017\011\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\021\006\000\002" +
    "\022\014\000\002\032\003\000\002\032\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\004\000\002" +
    "\027\010\000\002\027\006\000\002\027\010\000\002\027" +
    "\010\000\002\030\005\000\002\031\005\000\002\031\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\010\005\012\006\005\007\007\001\002\000" +
    "\012\002\ufffd\005\ufffd\006\ufffd\007\ufffd\001\002\000\004" +
    "\067\160\001\002\000\012\002\ufffc\005\ufffc\006\ufffc\007" +
    "\ufffc\001\002\000\004\057\143\001\002\000\012\002\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\001\002\000\012\002\ufffe\005" +
    "\ufffe\006\ufffe\007\ufffe\001\002\000\004\067\017\001\002" +
    "\000\012\002\000\005\012\006\005\007\007\001\002\000" +
    "\004\002\015\001\002\000\004\002\001\001\002\000\012" +
    "\002\uffff\005\uffff\006\uffff\007\uffff\001\002\000\004\057" +
    "\020\001\002\000\004\012\021\001\002\000\004\064\141" +
    "\001\002\000\004\060\140\001\002\000\004\013\025\001" +
    "\002\000\004\060\ufff9\001\002\000\004\064\026\001\002" +
    "\000\004\055\027\001\002\000\006\014\032\016\031\001" +
    "\002\000\004\056\137\001\002\000\044\010\051\011\050" +
    "\017\037\020\045\021\033\022\043\023\060\027\040\030" +
    "\057\031\035\032\042\033\053\046\036\055\052\065\056" +
    "\066\044\070\047\001\002\000\044\010\051\011\050\017" +
    "\037\020\045\021\033\022\043\023\060\027\040\030\057" +
    "\031\035\032\042\033\053\046\036\055\052\065\056\066" +
    "\044\070\047\001\002\000\004\061\131\001\002\000\024" +
    "\015\125\044\067\045\075\047\070\050\071\051\072\052" +
    "\074\053\073\054\076\001\002\000\036\015\uffde\040\uffde" +
    "\044\uffde\045\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053" +
    "\uffde\054\uffde\056\uffde\060\uffde\062\uffde\063\uffde\001\002" +
    "\000\044\010\051\011\050\017\037\020\045\021\033\022" +
    "\043\023\060\027\040\030\057\031\035\032\042\033\053" +
    "\046\036\055\052\065\056\066\044\070\047\001\002\000" +
    "\004\061\117\001\002\000\036\015\uffdc\040\uffdc\044\uffdc" +
    "\045\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054" +
    "\uffdc\056\uffdc\060\uffdc\062\uffdc\063\uffdc\001\002\000\036" +
    "\015\uffe1\040\uffe1\044\uffe1\045\uffe1\047\uffe1\050\uffe1\051" +
    "\uffe1\052\uffe1\053\uffe1\054\uffe1\056\uffe1\060\uffe1\062\uffe1" +
    "\063\uffe1\001\002\000\036\015\uffdb\040\uffdb\044\uffdb\045" +
    "\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb" +
    "\056\uffdb\060\uffdb\062\uffdb\063\uffdb\001\002\000\004\061" +
    "\112\001\002\000\036\015\uffd8\040\uffd8\044\uffd8\045\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\056" +
    "\uffd8\060\uffd8\062\uffd8\063\uffd8\001\002\000\004\061\107" +
    "\001\002\000\036\015\uffe3\040\uffe3\044\uffe3\045\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\056\uffe3" +
    "\060\uffe3\062\uffe3\063\uffe3\001\002\000\036\015\uffe0\040" +
    "\uffe0\044\uffe0\045\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0" +
    "\053\uffe0\054\uffe0\056\uffe0\060\uffe0\062\uffe0\063\uffe0\001" +
    "\002\000\040\013\uffe6\015\uffe6\040\uffe6\044\uffe6\045\uffe6" +
    "\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\056" +
    "\uffe6\060\uffe6\062\uffe6\063\uffe6\001\002\000\040\013\uffe7" +
    "\015\uffe7\040\uffe7\044\uffe7\045\uffe7\047\uffe7\050\uffe7\051" +
    "\uffe7\052\uffe7\053\uffe7\054\uffe7\056\uffe7\060\uffe7\062\uffe7" +
    "\063\uffe7\001\002\000\044\010\051\011\050\017\037\020" +
    "\045\021\033\022\043\023\060\027\040\030\057\031\035" +
    "\032\042\033\053\046\036\055\052\065\056\066\044\070" +
    "\047\001\002\000\036\015\uffda\040\uffda\044\uffda\045\uffda" +
    "\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda\056" +
    "\uffda\060\uffda\062\uffda\063\uffda\001\002\000\036\015\uffe5" +
    "\040\uffe5\044\uffe5\045\uffe5\047\uffe5\050\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\056\uffe5\060\uffe5\062\uffe5\063\uffe5" +
    "\001\002\000\036\015\uffe4\040\uffe4\044\uffe4\045\uffe4\047" +
    "\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\056\uffe4" +
    "\060\uffe4\062\uffe4\063\uffe4\001\002\000\036\015\uffd9\040" +
    "\uffd9\044\uffd9\045\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9" +
    "\053\uffd9\054\uffd9\056\uffd9\060\uffd9\062\uffd9\063\uffd9\001" +
    "\002\000\036\015\uffdf\040\uffdf\044\uffdf\045\uffdf\047\uffdf" +
    "\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\056\uffdf\060" +
    "\uffdf\062\uffdf\063\uffdf\001\002\000\036\015\uffdd\040\uffdd" +
    "\044\uffdd\045\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\054\uffdd\056\uffdd\060\uffdd\062\uffdd\063\uffdd\001\002" +
    "\000\036\015\uffe2\040\uffe2\044\uffe2\045\uffe2\047\uffe2\050" +
    "\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\056\uffe2\060\uffe2" +
    "\062\uffe2\063\uffe2\001\002\000\026\044\067\045\075\047" +
    "\070\050\071\051\072\052\074\053\073\054\076\056\uffc8" +
    "\063\uffc8\001\002\000\006\056\065\063\064\001\002\000" +
    "\044\010\051\011\050\017\037\020\045\021\033\022\043" +
    "\023\060\027\040\030\057\031\035\032\042\033\053\046" +
    "\036\055\052\065\056\066\044\070\047\001\002\000\036" +
    "\015\uffca\040\uffca\044\uffca\045\uffca\047\uffca\050\uffca\051" +
    "\uffca\052\uffca\053\uffca\054\uffca\056\uffca\060\uffca\062\uffca" +
    "\063\uffca\001\002\000\026\044\067\045\075\047\070\050" +
    "\071\051\072\052\074\053\073\054\076\056\uffc9\063\uffc9" +
    "\001\002\000\044\010\051\011\050\017\037\020\045\021" +
    "\033\022\043\023\060\027\040\030\057\031\035\032\042" +
    "\033\053\046\036\055\052\065\056\066\044\070\047\001" +
    "\002\000\044\010\051\011\050\017\037\020\045\021\033" +
    "\022\043\023\060\027\040\030\057\031\035\032\042\033" +
    "\053\046\036\055\052\065\056\066\044\070\047\001\002" +
    "\000\044\010\051\011\050\017\037\020\045\021\033\022" +
    "\043\023\060\027\040\030\057\031\035\032\042\033\053" +
    "\046\036\055\052\065\056\066\044\070\047\001\002\000" +
    "\044\010\051\011\050\017\037\020\045\021\033\022\043" +
    "\023\060\027\040\030\057\031\035\032\042\033\053\046" +
    "\036\055\052\065\056\066\044\070\047\001\002\000\044" +
    "\010\051\011\050\017\037\020\045\021\033\022\043\023" +
    "\060\027\040\030\057\031\035\032\042\033\053\046\036" +
    "\055\052\065\056\066\044\070\047\001\002\000\044\010" +
    "\051\011\050\017\037\020\045\021\033\022\043\023\060" +
    "\027\040\030\057\031\035\032\042\033\053\046\036\055" +
    "\052\065\056\066\044\070\047\001\002\000\044\010\051" +
    "\011\050\017\037\020\045\021\033\022\043\023\060\027" +
    "\040\030\057\031\035\032\042\033\053\046\036\055\052" +
    "\065\056\066\044\070\047\001\002\000\044\010\051\011" +
    "\050\017\037\020\045\021\033\022\043\023\060\027\040" +
    "\030\057\031\035\032\042\033\053\046\036\055\052\065" +
    "\056\066\044\070\047\001\002\000\036\015\uffd2\040\uffd2" +
    "\044\uffd2\045\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053" +
    "\uffd2\054\uffd2\056\uffd2\060\uffd2\062\uffd2\063\uffd2\001\002" +
    "\000\036\015\uffd0\040\uffd0\044\uffd0\045\uffd0\047\uffd0\050" +
    "\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\056\uffd0\060\uffd0" +
    "\062\uffd0\063\uffd0\001\002\000\036\015\uffd4\040\uffd4\044" +
    "\uffd4\045\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4" +
    "\054\uffd4\056\uffd4\060\uffd4\062\uffd4\063\uffd4\001\002\000" +
    "\036\015\uffd3\040\uffd3\044\uffd3\045\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\052\uffd3\053\uffd3\054\uffd3\056\uffd3\060\uffd3\062" +
    "\uffd3\063\uffd3\001\002\000\036\015\uffd5\040\uffd5\044\uffd5" +
    "\045\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054" +
    "\uffd5\056\uffd5\060\uffd5\062\uffd5\063\uffd5\001\002\000\036" +
    "\015\uffd6\040\uffd6\044\uffd6\045\uffd6\047\uffd6\050\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\054\uffd6\056\uffd6\060\uffd6\062\uffd6" +
    "\063\uffd6\001\002\000\036\015\uffd7\040\uffd7\044\uffd7\045" +
    "\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7" +
    "\056\uffd7\060\uffd7\062\uffd7\063\uffd7\001\002\000\036\015" +
    "\uffd1\040\uffd1\044\uffd1\045\uffd1\047\uffd1\050\uffd1\051\uffd1" +
    "\052\uffd1\053\uffd1\054\uffd1\056\uffd1\060\uffd1\062\uffd1\063" +
    "\uffd1\001\002\000\044\010\051\011\050\017\037\020\045" +
    "\021\033\022\043\023\060\027\040\030\057\031\035\032" +
    "\042\033\053\046\036\055\052\065\056\066\044\070\047" +
    "\001\002\000\024\044\067\045\075\047\070\050\071\051" +
    "\072\052\074\053\073\054\076\062\111\001\002\000\036" +
    "\015\uffcd\040\uffcd\044\uffcd\045\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\052\uffcd\053\uffcd\054\uffcd\056\uffcd\060\uffcd\062\uffcd" +
    "\063\uffcd\001\002\000\044\010\051\011\050\017\037\020" +
    "\045\021\033\022\043\023\060\027\040\030\057\031\035" +
    "\032\042\033\053\046\036\055\052\065\056\066\044\070" +
    "\047\001\002\000\024\044\067\045\075\047\070\050\071" +
    "\051\072\052\074\053\073\054\076\063\114\001\002\000" +
    "\044\010\051\011\050\017\037\020\045\021\033\022\043" +
    "\023\060\027\040\030\057\031\035\032\042\033\053\046" +
    "\036\055\052\065\056\066\044\070\047\001\002\000\024" +
    "\044\067\045\075\047\070\050\071\051\072\052\074\053" +
    "\073\054\076\062\116\001\002\000\036\015\uffcc\040\uffcc" +
    "\044\uffcc\045\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053" +
    "\uffcc\054\uffcc\056\uffcc\060\uffcc\062\uffcc\063\uffcc\001\002" +
    "\000\044\010\051\011\050\017\037\020\045\021\033\022" +
    "\043\023\060\027\040\030\057\031\035\032\042\033\053" +
    "\046\036\055\052\065\056\066\044\070\047\001\002\000" +
    "\024\044\067\045\075\047\070\050\071\051\072\052\074" +
    "\053\073\054\076\063\121\001\002\000\044\010\051\011" +
    "\050\017\037\020\045\021\033\022\043\023\060\027\040" +
    "\030\057\031\035\032\042\033\053\046\036\055\052\065" +
    "\056\066\044\070\047\001\002\000\024\044\067\045\075" +
    "\047\070\050\071\051\072\052\074\053\073\054\076\062" +
    "\123\001\002\000\036\015\uffce\040\uffce\044\uffce\045\uffce" +
    "\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\056" +
    "\uffce\060\uffce\062\uffce\063\uffce\001\002\000\036\015\uffcf" +
    "\040\uffcf\044\uffcf\045\uffcf\047\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\054\uffcf\056\uffcf\060\uffcf\062\uffcf\063\uffcf" +
    "\001\002\000\044\010\051\011\050\017\037\020\045\021" +
    "\033\022\043\023\060\027\040\030\057\031\035\032\042" +
    "\033\053\046\036\055\052\065\056\066\044\070\047\001" +
    "\002\000\026\044\067\045\075\047\070\050\071\051\072" +
    "\052\074\053\073\054\076\056\ufff5\063\127\001\002\000" +
    "\006\014\032\016\031\001\002\000\004\056\ufff6\001\002" +
    "\000\044\010\051\011\050\017\037\020\045\021\033\022" +
    "\043\023\060\027\040\030\057\031\035\032\042\033\053" +
    "\046\036\055\052\065\056\066\044\070\047\001\002\000" +
    "\024\044\067\045\075\047\070\050\071\051\072\052\074" +
    "\053\073\054\076\063\133\001\002\000\044\010\051\011" +
    "\050\017\037\020\045\021\033\022\043\023\060\027\040" +
    "\030\057\031\035\032\042\033\053\046\036\055\052\065" +
    "\056\066\044\070\047\001\002\000\024\044\067\045\075" +
    "\047\070\050\071\051\072\052\074\053\073\054\076\062" +
    "\135\001\002\000\036\015\uffcb\040\uffcb\044\uffcb\045\uffcb" +
    "\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\056" +
    "\uffcb\060\uffcb\062\uffcb\063\uffcb\001\002\000\024\044\067" +
    "\045\075\047\070\050\071\051\072\052\074\053\073\054" +
    "\076\056\ufff4\001\002\000\004\060\ufff7\001\002\000\012" +
    "\002\ufffa\005\ufffa\006\ufffa\007\ufffa\001\002\000\006\010" +
    "\051\011\050\001\002\000\004\013\ufff8\001\002\000\004" +
    "\041\145\001\002\000\004\060\157\001\002\000\004\055" +
    "\146\001\002\000\004\067\147\001\002\000\004\056\150" +
    "\001\002\000\004\042\151\001\002\000\004\057\152\001" +
    "\002\000\004\043\153\001\002\000\004\064\154\001\002" +
    "\000\044\010\051\011\050\017\037\020\045\021\033\022" +
    "\043\023\060\027\040\030\057\031\035\032\042\033\053" +
    "\046\036\055\052\065\056\066\044\070\047\001\002\000" +
    "\024\044\067\045\075\047\070\050\071\051\072\052\074" +
    "\053\073\054\076\060\156\001\002\000\004\060\uffe8\001" +
    "\002\000\012\002\uffe9\005\uffe9\006\uffe9\007\uffe9\001\002" +
    "\000\004\057\161\001\002\000\004\024\162\001\002\000" +
    "\004\025\223\001\002\000\004\060\222\001\002\000\004" +
    "\026\165\001\002\000\004\064\220\001\002\000\004\040" +
    "\167\001\002\000\004\064\171\001\002\000\004\060\ufff2" +
    "\001\002\000\004\057\172\001\002\000\012\034\176\035" +
    "\174\036\173\037\200\001\002\000\004\064\216\001\002" +
    "\000\004\064\214\001\002\000\004\060\213\001\002\000" +
    "\004\064\211\001\002\000\004\063\203\001\002\000\004" +
    "\064\201\001\002\000\044\010\051\011\050\017\037\020" +
    "\045\021\033\022\043\023\060\027\040\030\057\031\035" +
    "\032\042\033\053\046\036\055\052\065\056\066\044\070" +
    "\047\001\002\000\026\044\067\045\075\047\070\050\071" +
    "\051\072\052\074\053\073\054\076\060\uffea\063\uffea\001" +
    "\002\000\012\034\176\035\174\036\173\037\200\001\002" +
    "\000\004\063\205\001\002\000\012\034\176\035\174\036" +
    "\173\037\200\001\002\000\004\063\207\001\002\000\012" +
    "\034\176\035\174\036\173\037\200\001\002\000\004\060" +
    "\uffee\001\002\000\044\010\051\011\050\017\037\020\045" +
    "\021\033\022\043\023\060\027\040\030\057\031\035\032" +
    "\042\033\053\046\036\055\052\065\056\066\044\070\047" +
    "\001\002\000\026\044\067\045\075\047\070\050\071\051" +
    "\072\052\074\053\073\054\076\060\uffed\063\uffed\001\002" +
    "\000\004\060\uffef\001\002\000\044\010\051\011\050\017" +
    "\037\020\045\021\033\022\043\023\060\027\040\030\057" +
    "\031\035\032\042\033\053\046\036\055\052\065\056\066" +
    "\044\070\047\001\002\000\026\044\067\045\075\047\070" +
    "\050\071\051\072\052\074\053\073\054\076\060\uffec\063" +
    "\uffec\001\002\000\044\010\051\011\050\017\037\020\045" +
    "\021\033\022\043\023\060\027\040\030\057\031\035\032" +
    "\042\033\053\046\036\055\052\065\056\066\044\070\047" +
    "\001\002\000\026\044\067\045\075\047\070\050\071\051" +
    "\072\052\074\053\073\054\076\060\uffeb\063\uffeb\001\002" +
    "\000\044\010\051\011\050\017\037\020\045\021\033\022" +
    "\043\023\060\027\040\030\057\031\035\032\042\033\053" +
    "\046\036\055\052\065\056\066\044\070\047\001\002\000" +
    "\024\040\ufff0\044\067\045\075\047\070\050\071\051\072" +
    "\052\074\053\073\054\076\001\002\000\012\002\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\001\002\000\004\064\224\001\002" +
    "\000\004\055\225\001\002\000\004\067\226\001\002\000" +
    "\004\063\227\001\002\000\004\067\230\001\002\000\004" +
    "\056\231\001\002\000\004\026\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\016\002\013\003\012\004\010\005\003\012" +
    "\005\021\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\015\005\003" +
    "\012\005\021\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\021" +
    "\007\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\027\001\001\000\002\001" +
    "\001\000\016\024\135\025\053\026\054\027\060\030\040" +
    "\032\045\001\001\000\016\024\033\025\053\026\054\027" +
    "\060\030\040\032\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\024\123\025\053\026" +
    "\054\027\060\030\040\032\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\024\061\025\053\026\054\027\060\030\040" +
    "\031\062\032\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\024\065\025\053\026\054\027\060" +
    "\030\040\032\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\024\105\025\053\026\054\027\060\030\040" +
    "\032\045\001\001\000\016\024\104\025\053\026\054\027" +
    "\060\030\040\032\045\001\001\000\016\024\103\025\053" +
    "\026\054\027\060\030\040\032\045\001\001\000\016\024" +
    "\102\025\053\026\054\027\060\030\040\032\045\001\001" +
    "\000\016\024\101\025\053\026\054\027\060\030\040\032" +
    "\045\001\001\000\016\024\100\025\053\026\054\027\060" +
    "\030\040\032\045\001\001\000\016\024\077\025\053\026" +
    "\054\027\060\030\040\032\045\001\001\000\016\024\076" +
    "\025\053\026\054\027\060\030\040\032\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\024\107\025\053\026\054" +
    "\027\060\030\040\032\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\024\112\025\053\026\054\027\060" +
    "\030\040\032\045\001\001\000\002\001\001\000\016\024" +
    "\114\025\053\026\054\027\060\030\040\032\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\024\117\025" +
    "\053\026\054\027\060\030\040\032\045\001\001\000\002" +
    "\001\001\000\016\024\121\025\053\026\054\027\060\030" +
    "\040\032\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\024\125\025\053\026\054\027" +
    "\060\030\040\032\045\001\001\000\002\001\001\000\004" +
    "\011\127\001\001\000\002\001\001\000\016\024\131\025" +
    "\053\026\054\027\060\030\040\032\045\001\001\000\002" +
    "\001\001\000\016\024\133\025\053\026\054\027\060\030" +
    "\040\032\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\141\001\001\000\002\001\001\000\004\022\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\024\154\025" +
    "\053\026\054\027\060\030\040\032\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\162\014\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\165\001\001\000\002\001" +
    "\001\000\004\016\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\174\020\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\024\201\025\053\026\054\027\060\030\040\032\045" +
    "\001\001\000\002\001\001\000\004\020\203\001\001\000" +
    "\002\001\001\000\004\020\205\001\001\000\002\001\001" +
    "\000\004\020\207\001\001\000\002\001\001\000\016\024" +
    "\211\025\053\026\054\027\060\030\040\032\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\024\214\025" +
    "\053\026\054\027\060\030\040\032\045\001\001\000\002" +
    "\001\001\000\016\024\216\025\053\026\054\027\060\030" +
    "\040\032\045\001\001\000\002\001\001\000\016\024\220" +
    "\025\053\026\054\027\060\030\040\032\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 
    public ArrayList<Instruccion> sentencias;
    public static LinkedList<String[]> erroresSintacticos = new LinkedList<>();

    @Override
    public void syntax_error(Symbol s) {
        String[] error = new String[5];
        OLC1_Proyecto1_202302220.contador1++;
        error[0] = Integer.toString(OLC1_Proyecto1_202302220.contador1); // Número de error
        error[1] = "ERROR_SINTACTICO";
        error[2] = (s.value != null) ? s.value.toString() : "null";
        error[3] = Integer.toString(s.left);
        error[4] = Integer.toString(s.right);

        // Agregar a la lista de errores sintácticos
        erroresSintacticos.add(error);
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= iniciar 
            {
              Object RESULT =null;
		int iniciarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iniciarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Instruccion> iniciar = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sentencias = iniciar; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // iniciar ::= iniciar instruccion 
            {
              ArrayList<Instruccion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruccion> l = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; RESULT.add(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iniciar",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // iniciar ::= instruccion 
            {
              ArrayList<Instruccion> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(Arrays.asList(i));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iniciar",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= bloque_Strategy 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CrearEstrategia e = (CrearEstrategia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= bloque_Match 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= bloque_Main 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bloque_Strategy ::= STRATEGY ID ABRE_LLAVE strategy_Cuerpo CIERRA_LLAVE 
            {
              CrearEstrategia RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstruccionEstrategia inst = (InstruccionEstrategia)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CrearEstrategia(n, inst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_Strategy",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // strategy_Cuerpo ::= regla_Inicial reglas 
            {
              InstruccionEstrategia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Regla> r = (ArrayList<Regla>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new InstruccionEstrategia(i,r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strategy_Cuerpo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // regla_Inicial ::= INITIAL DOS_PUNTOS decision 
            {
              Expresion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("regla_Inicial",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // reglas ::= RULES DOS_PUNTOS ABRE_CORCHETE lista_Reglas CIERRA_CORCHETE 
            {
              ArrayList<Regla> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Regla> l = (ArrayList<Regla>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reglas",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_Reglas ::= IF expresion THEN expresion COMA lista_Reglas 
            {
              ArrayList<Regla> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Regla> l = (ArrayList<Regla>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; RESULT.add(new Regla(c, a)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_Reglas",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_Reglas ::= IF expresion THEN expresion 
            {
              ArrayList<Regla> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Regla>(Arrays.asList(new Regla(c, a))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_Reglas",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_Reglas ::= ELSE expresion 
            {
              ArrayList<Regla> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Regla>(Arrays.asList(new Regla(null, a))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_Reglas",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bloque_Match ::= MATCH ID ABRE_LLAVE match_Cuerpo CIERRA_LLAVE 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstruccionPartida inst = (InstruccionPartida)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CrearPartida(n, inst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_Match",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // match_Cuerpo ::= jugadores rondas puntuaciones 
            {
              InstruccionPartida RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Jugadores j = (Jugadores)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion r = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Puntos p = (Puntos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstruccionPartida(j, r, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("match_Cuerpo",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // jugadores ::= PLAYERS STRATEGIES DOS_PUNTOS ABRE_CORCHETE ID COMA ID CIERRA_CORCHETE 
            {
              Jugadores RESULT =null;
		int j1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int j1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String j1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int j2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int j2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String j2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Jugadores(j1, j2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jugadores",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // rondas ::= ROUNDS DOS_PUNTOS expresion 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rondas",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // puntuaciones ::= SCORING DOS_PUNTOS ABRE_LLAVE puntos CIERRA_LLAVE 
            {
              Puntos RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Puntos p = (Puntos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("puntuaciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // puntos ::= puntuacion COMA puntuacion COMA puntuacion COMA puntuacion 
            {
              Puntos RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion tr = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int taleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int taright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ta = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Puntos(c, d, tr, ta); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("puntos",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // puntuacion ::= MUTUAL_COOPERATION DOS_PUNTOS expresion 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("puntuacion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // puntuacion ::= MUTUAL_DEFECTION DOS_PUNTOS expresion 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("puntuacion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // puntuacion ::= BETRAYAL_REWARD DOS_PUNTOS expresion 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("puntuacion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // puntuacion ::= BETRAYAL_PUNISHMENT DOS_PUNTOS expresion 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("puntuacion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloque_Main ::= MAIN ABRE_LLAVE main_Cuerpo CIERRA_LLAVE 
            {
              Instruccion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Inicio(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_Main",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // main_Cuerpo ::= RUN ABRE_CORCHETE ID CIERRA_CORCHETE WITH ABRE_LLAVE SEED DOS_PUNTOS expresion CIERRA_LLAVE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_Cuerpo",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // decision ::= C 
            {
              Expresion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitiva(d, TipoTipo.DECISION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // decision ::= D 
            {
              Expresion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitiva(d, TipoTipo.DECISION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decision",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= comparacion 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion r = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= logica 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= decision 
            {
              Expresion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= funcion 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= lista 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= RANDOM 
            {
              Expresion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RandomNumber(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= OPPONENT_HISTORY 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= SELF_HISTORY 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= ROUND_NUMBER 
            {
              Expresion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =new RondaActual(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= TOTAL_ROUNDS 
            {
              Expresion RESULT =null;
		int Rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String R = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =new TotalRondas(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= TRUE 
            {
              Expresion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitiva(p,TipoTipo.BOOLEANO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= FALSE 
            {
              Expresion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitiva(p,TipoTipo.BOOLEANO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= ENTERO 
            {
              Expresion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitiva(p,TipoTipo.ENTERO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= FLOTANTE 
            {
              Expresion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitiva(p,TipoTipo.FLOTANTE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comparacion ::= expresion IGUAL expresion 
            {
              Expresion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Comparacion(exp1,op,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparacion ::= expresion NO_IGUAL expresion 
            {
              Expresion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Comparacion(exp1,op,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comparacion ::= expresion MENOR expresion 
            {
              Expresion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Comparacion(exp1,op,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comparacion ::= expresion MAYOR expresion 
            {
              Expresion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Comparacion(exp1,op,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comparacion ::= expresion MENOR_IGUAL expresion 
            {
              Expresion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Comparacion(exp1,op,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comparacion ::= expresion MAYOR_IGUAL expresion 
            {
              Expresion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Comparacion(exp1,op,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // logica ::= expresion AND expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logica",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // logica ::= expresion OR expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logica",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // logica ::= NOT expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logica",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // funcion ::= GET_MOVE ABRE_PARENTESIS expresion COMA expresion CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion lista = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int accionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int accionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion accion = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // funcion ::= LAST_MOVE ABRE_PARENTESIS expresion CIERRA_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // funcion ::= GET_MOVES_COUNT ABRE_PARENTESIS expresion COMA expresion CIERRA_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // funcion ::= GET_LAST_N_MOVES ABRE_PARENTESIS expresion COMA expresion CIERRA_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lista ::= ABRE_CORCHETE elemento CIERRA_CORCHETE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // elemento ::= elemento COMA expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // elemento ::= expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemento",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
